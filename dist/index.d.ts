import { getParent, getInclusiveAncestors, getAncestors, getChildren, getFirstChild, getLastChild, getInclusiveSiblings, getSiblings, getPreviousSiblings, getNextSiblings, getNextSibling, getPreviousSibling } from "./traversal";
import { hasChild, hasChildren, hasDescendent } from "./comparison";
import { removeChild, removeParent, removeChildren, removeAllChildren } from "./remove";
import { appendChild, appendChildren, prependChild, prependChildren, insertAfter, insertBefore, replace } from "./insertion";
import { areValidRelatables, isValidRelatable } from "./utilities/validate";
import { clearAllRelatables, setChildren } from "./utilities/maps";
export { areValidRelatables, isValidRelatable, clearAllRelatables, setChildren, appendChild, appendChildren, prependChild, prependChildren, insertAfter, insertBefore, replace, getParent, getInclusiveAncestors, getAncestors, getChildren, getFirstChild, getLastChild, getInclusiveSiblings, getSiblings, getPreviousSiblings, getNextSiblings, getNextSibling, getPreviousSibling, hasChild, hasChildren, hasDescendent, removeChild, removeParent, removeChildren, removeAllChildren, };
declare const relatableFunctions: {
    areValidRelatables: typeof areValidRelatables;
    isValidRelatable: typeof isValidRelatable;
    clearAllRelatables: typeof clearAllRelatables;
    setChildren: typeof setChildren;
    appendChild: typeof appendChild;
    appendChildren: typeof appendChildren;
    prependChild: typeof prependChild;
    prependChildren: typeof prependChildren;
    insertAfter: typeof insertAfter;
    insertBefore: typeof insertBefore;
    replace: typeof replace;
    getParent: typeof getParent;
    getInclusiveAncestors: typeof getInclusiveAncestors;
    getAncestors: typeof getAncestors;
    getChildren: typeof getChildren;
    getFirstChild: typeof getFirstChild;
    getLastChild: typeof getLastChild;
    getInclusiveSiblings: typeof getInclusiveSiblings;
    getSiblings: typeof getSiblings;
    getPreviousSiblings: typeof getPreviousSiblings;
    getNextSiblings: typeof getNextSiblings;
    getNextSibling: typeof getNextSibling;
    getPreviousSibling: typeof getPreviousSibling;
    hasChild: typeof hasChild;
    hasChildren: typeof hasChildren;
    hasDescendent: typeof hasDescendent;
    removeChild: typeof removeChild;
    removeParent: typeof removeParent;
    removeChildren: typeof removeChildren;
    removeAllChildren: typeof removeAllChildren;
};
export default relatableFunctions;
//# sourceMappingURL=index.d.ts.map